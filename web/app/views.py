from web.webrun import app
from q_twitchbeagle import q_twitchbeagle
from flask import render_template, redirect, request
from config import STREAMLABS_ID, STREAMLABS_REDIRECT, STREAMLABS_SECRET, \
        CLIENT_ID, CLIENT_SECRET

import ConfigParser

import requests

@app.route('/firsttime')
def firsttime():
    return "You've met with a horrible fate, haven't you?"

@app.route('/')
@app.route('/index')
def index():
    firsttimecheck = checkforfirstsetup()
    if firsttimecheck:
        return firsttimecheck

    event = {
            'eventType' : 'electrical',
            'event'     : 'red toggle'
    }
    q_twitchbeagle.put(event)
    return "Hello, World!"

@app.route('/settings')
def settings():
    firsttimecheck = checkforfirstsetup()
    if firsttimecheck:
        return firsttimecheck
    user = {
            'name' : 'Amp'
    }
    return render_template(
            'settings.html',
            title='Home',
            user=user)

@app.route('/streamlabsauth')
def slauth():
    firsttimecheck = checkforfirstsetup()
    if firsttimecheck:
        return firsttimecheck
    if request.args.get('code'):
        url = 'https://streamlabs.com/api/v1.0/token'
        authorize_call = {
            'grant_type'    : 'authorization_code',
            'client_id'     : STREAMLABS_ID,
            'client_secret' : STREAMLABS_SECRET,
            'code'          : request.args.get('code'),
            'redirect_uri'  : STREAMLABS_REDIRECT + "/streamlabsauth"
        }
        headers = []
        r = requests.post(
                url,
                data = authorize_call,
                headers = headers
        )
        
        token_data = r.json()
        r_token = token_data['refresh_token']
        a_token = token_data['access_token']


    with open('slrefreshtoken', 'w') as f:
        f.write(r_token)

    with open('slaccesstoken', 'w') as f:
        f.write(a_token)
    return "Tokens Collected!"

@app.route('/streamlabssetup')
def slsetup():
    firsttimecheck = checkforfirstsetup()
    if firsttimecheck:
        return firsttimecheck
    return redirect(
            "http://streamlabs.com/api/v1.0/authorize?client_id="+\
            STREAMLABS_ID + \
            "&redirect_uri=" + STREAMLABS_REDIRECT + "/streamlabsauth" \
            "&response_type=code"+\
            "&scope=donations.read", code=302
    )

@app.route('/twitchappsetup')
def twappsetup():
    '''
    GET https://api.twitch.tv/kraken/oauth2/authorize
    ?client_id=<your client ID>
    &redirect_uri=<your registered redirect URI>
    &response_type=code
    &scope=<space-separated list of scopes>
    '''
    return redirect(
            "https://api.twitch.tv/kraken/oauth2/authorize?client_id=" +\
            CLIENT_ID + \
            "&redirect_uri=http://192.168.1.140:5000/twitchauth" +\
            "&response_type=code" +\
            "&scope=channel_editor+channel_subscriptions"
    )
    
@app.route('/twitchauth')
def twitchauth():
    '''
    POST https://api.twitch.tv/kraken/oauth2/token
    ?client_id=<your client ID>
    &client_secret=<your client secret>
    &code=<authorization code received above>
    &grant_type=authorization_code
    &redirect_uri=<your registered redirect URI>
    &state=<your unique token generated by your application>
    '''
    if request.args.get('code'):
        authcall = {
                'client_id'     :      CLIENT_ID,
                'redirect_uri'  :      "http://192.168.1.140:5000/twitchauth",
                'client_secret' :      CLIENT_SECRET,
                'code'          :      request.args.get('code'),
                'grant_type'    :      'authorization_code'
                }
        url = "https://api.twitch.tv/kraken/oauth2/token"
        headers = []
        r = requests.post(
                url,
                data = authcall,
                headers = headers
        )
        token_data = r.json()
        with open('editor_token', 'w') as f:
            f.write(token_data['access_token'])
        return "KEYS GRABBED"


def checkforfirstsetup():
    config = ConfigParser.ConfigParser()
    if config.read('config.ini') == []:
        return redirect('/firsttime')

